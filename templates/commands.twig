{% extends "layout.twig" %}

{% block title %}Search endpoints{% endblock %}

{% block content %}
<div class="container feature">
    <h1 class="feature-title">Search endpoints</h1>
    <input type="text" class="js-search-input typeahead" placeholder="e.g. GET users">
    <p class="feature-search-tip" hidden>Start typing the route youâ€™re looking for.</p>
    <p class="feature-or">or</p>
    <a href="/directory/" class="primary-button feature-button">Browse the directory</a>
    <ol class="js-command-list search-results">
        
    </ol>
</div>

<script type="text/template" id="template">
    <li class="search-result">
        <a href="<%= path %>" class="search-result-link">
            <h2 class="search-result-title endpoint-method-<%= method %> endpoint-list-title">
                <span class="endpoint-list-method"><%= method %></span> <span class="endpoint-list-uri"><%= formattedUri %></span>
            </h2>
            <% if (summary) { %>
                <p class="search-result-summary endpoint-list-summary"><%= summary %></p>
            <% } %>
        </a>
    </li>
</script>

<script>
$(function() {
    var searchField = $('.js-search-input'),
        commandList = $('.js-command-list'),
        template = null,
        commands = null;

    localStorage.clear();

    searchField.one('focus', function () {
        var feature = $('.feature');
        $(feature).addClass('feature-active');

        setTimeout(function() {
            $(feature).find('.feature-or, .feature-button').attr('hidden', true);
            $(feature).find('.feature-search-tip').attr('hidden', false);
        }, 500);
    });

    template = _.template($('#template').html());

    commands = new Bloodhound({
        datumTokenizer: function (d) {
            return d.tokens;
        },
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: '/data/commands.json',
        limit: 16
    });

    commands.initialize();

    searchField.on('keyup', function (evt) {
        var query = evt.currentTarget.value;

        commandList.empty();

        commands.get(evt.currentTarget.value, function (suggestions) {
            _.each(suggestions, function (suggestion) {
                commandList.append(template(suggestion));
            });
        });
    });
});
</script>
{% endblock %}
